#include "shell.h"

/**
 * is_chain - Determines if the current character in a buffer signals a 
 * command chain. This function checks for specific characters ('|', '&', ';') 
 * to identify command chaining.
 * @info: Struct containing command execution information.
 * @buf: Buffer containing the command string.
 * @p: Pointer to the current position in the buffer.
 *
 * Return: 1 if a chaining delimiter is found, 0 otherwise.
 */
int is_chain(info_passed *info, char *buf, size_first *p)
{
	size_first a = *p;

	if (buf[a] == '|' && buf[a + 1] == '|')
	{
		buf[a] = 0;
		a++;
		info->cmd_buf_type = CMD_OR;
	}
	else if (buf[a] == '&' && buf[a + 1] == '&')
	{
		buf[a] = 0;
		a++;
		info->cmd_buf_type = CMD_AND;
	}
	else if (buf[a] == ';') /* Terminate the current command */
	{
		buf[a] = 0; /* Replace semicolon with null */
		info->cmd_buf_type = CMD_CHAIN;
	}
	else
		return (0);
	*p = a;
	return (1);
}

/**
 * check_chain - Determines whether to continue command chaining based on 
 * the last command's status. If the command chain type is 'AND' and the last 
 * command failed, or if it's 'OR' and the last command succeeded, it stops 
 * the chaining by terminating the buffer.
 * @info: Struct containing command execution information.
 * @buf: Buffer containing the command string.
 * @p: Pointer to the current position in the buffer.
 * @i: Start position of the current command in the buffer.
 * @len: Total length of the buffer.
 */
void check_chain(info_passed *info, char *buf, size_first *p, size_first i, 
	size_first len)
{
	size_first a = *p;

	if (info->cmd_buf_type == CMD_AND && info->status)
	{
		buf[i] = 0;
		a = len;
	}
	else if (info->cmd_buf_type == CMD_OR && !info->status)
	{
		buf[i] = 0;
		a = len;
	}

	*p = a;
}

/**
 * replace_alias - Substitutes any aliases in the command with their 
 * respective values. Searches for aliases in the command arguments and 
 * replaces them with their actual values.
 * @info: Struct containing command execution information.
 *
 * Return: 1 if any alias is replaced, 0 if no aliases are found.
 */
int replace_alias(info_passed *info)
{
	int i;
	list_str *node;
	char *p;

	for (i = 0; i < 10; i++)
	{
		node = prefix_start(info->alias, info->argv[0], '=');
		if (!node)
			return (0);
		free(info->argv[0]);
		p = _strchr(node->str, '=');
		if (!p)
			return (0);
		p = _strdup(p + 1);
		if (!p)
			return (0);
		info->argv[0] = p;
	}
	return (1);
}

/**
 * replace_vars - Replaces any special variables in the command with their 
 * values. Looks for variables like '$?' and '$$' in the command arguments and 
 * substitutes them with their current values.
 * @info: Struct containing command execution information.
 *
 * Return: 1 if any variable is replaced, 0 otherwise.
 */
int replace_vars(info_passed *info)
{
	int i = 0;
	list_str *node;

	for (i = 0; info->argv[i]; i++)
	{
		if (info->argv[i][0] != '$' || !info->argv[i][1])
			continue;

		if (!_strcmp(info->argv[i], "$?"))
		{
			replace_string(&(info->argv[i]), 
				_strdup(convert_number(info->status, 10, 0)));
			continue;
		}
		if (!_strcmp(info->argv[i], "$$"))
		{
			replace_string(&(info->argv[i]), 
				_strdup(convert_number(getpid(), 10, 0)));
			continue;
		}
		node = prefix_start(info->env, &info->argv[i][1], '=');
		if (node)
		{
			replace_string(&(info->argv[i]), 
				_strdup(_strchr(node->str, '=') + 1));
			continue;
		}
		replace_string(&info->argv[i], _strdup(""));
	}
	return (0);
}

/**
 * replace_string - Replaces an old string with a new one in a given location.
 * This function is used for updating command arguments during processing.
 * @old: Address of the pointer to the old string.
 * @new: New string to replace with.
 *
 * Return: 1 if replacement is successful, 0 otherwise.
 */
int replace_string(char **old, char *new)
{
	free(*old);
	*old = new;
	return (1);
}
